stages:
  - check
  - build
  - build-ci-release-docker
  - release-docker-development
  - pages
  - release-docker-production

image: docker.dev.dszn.cz/golang-build:stretch

.ci_scripts_image: &ci_scripts_image
  image: docker.dev.dszn.cz/generic/ci-scripts:1

variables:
  DOCKER_NAMESPACE: sklik-devops
  CI_SCRIPTS_ARCHIVE_URL: https://generic.gitlab.seznam.net/ci-scripts/v1/all.tar.gz

lint:
  stage: check
  script: |
    make lint

test:
  stage: check
  script: |
    make test-and-coverage
  artifacts:
    paths:
      - coverage.out
    expire_in: 1 week
    when: always

benchmark:
  stage: check
  before_script:
    - apt-get update
    - apt-get install -y graphviz curl
    - go get -u golang.org/x/perf/cmd/...
  script: |
    echo "Benchmarking current revision..."
    make benchmark > new_benchmark.txt
    cp new_benchmark.txt old_benchmark.txt
    curl ${CI_PAGES_URL}/benchmark.txt --output old_benchmark.txt
    echo "Benchmark diff since last master commit"
    benchstat --sort delta old_benchmark.txt new_benchmark.txt
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: always
    - if: '$CI_COMMIT_BRANCH == null'
      when: never
    - when: manual
  artifacts:
    paths:
      - new_benchmark.txt
      - profile
    expire_in: 1 week
    when: always


e2e-test:
  stage: check
  script: |
    make e2e-test
  artifacts:
    paths:
      - test/**/test_ouput
    expire_in: 1 week
    when: always


test-tag-version:
  <<: *ci_scripts_image
  stage: check
  script: |
    /ci/test-version-match.sh
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+/


build:
  stage: build
  before_script:
    - curl ${CI_SCRIPTS_ARCHIVE_URL} | tar -xz -C /
    - source /ci/common.sh
    - export SLO_EXPORTER_VERSION=$(get_version)
  script: |
    make build
  artifacts:
    paths:
      - slo_exporter
    expire_in: 1 week

build-ci-release-docker:
  <<: *ci_scripts_image
  stage: build-ci-release-docker
  script: |
    /ci/docker-build.sh --namespace $DOCKER_NAMESPACE
    /ci/docker-release-ci.sh --namespace $DOCKER_NAMESPACE --extra-tags "$CI_COMMIT_REF_NAME"
  dependencies:
    - build
  artifacts:
    expire_in: 1 mos
    paths:
      - docker-release-ci.uri

release-docker-development:
  <<: *ci_scripts_image
  stage: release-docker-development
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+/
  except:
    - branches
  script: |
    EXTRA_TAGS="$(/ci/latest-tags.sh)"
    /ci/docker-release.sh --namespace $DOCKER_NAMESPACE --extra-tags "$EXTRA_TAGS"
  artifacts:
    expire_in: 3 mos
    paths:
      - docker-release.uri
      - docker-release.digest


pages:
  stage: pages
  dependencies:
    - test
    - benchmark
  only:
    - master
  script: |
    # GoDoc
    mkdir public
    ./scripts/generate_godoc.sh public/godoc

    # CodeCoverage
    go tool cover -html coverage.out -o public/coverage.html

    # Benchmark
    cp new_benchmark.txt ./public/benchmark.txt

    # Profiling and benchmarks
    profiling_dir="public/profiling"
    cp -r ./profile $profiling_dir
    echo "<h1>SLO exporter profiles</h1><ul>" >> $profiling_dir/index.html
    for f in $(ls $profiling_dir); do
      echo "<li><a href="$f">$f</a></li>" >> $profiling_dir/index.html
    done
    echo "</ul>" >> $profiling_dir/index.html

    # Landing page
    cat > public/index.html <<EOF
    <h1>SLO exporter</h1>
    <ul>
      <li><a href="godoc/pkg/gitlab.seznam.net/sklik-devops/slo-exporter">GoDoc</a></li>
      <li><a href="profiling/index.html">Profiling</a></li>
    <li><a href="benchmark.txt">Benchmark</a></li>
      <li><a href="coverage.html">Code coverage</a></li>
    </ul>
    EOF
  artifacts:
    expire_in: 1 mos
    paths:
      - public


# Release docker image to production registry
# ---------------------------------------------------------------------------
release-docker-production:
  <<: *ci_scripts_image
  stage: release-docker-production
  except:
    - branches
  only:
    - /^v[0-9]+\.[0-9]+\.[0-9]+/
  script: |
    /ci/docker-release-to-production-registry-dirt.sh --docker-image-name-file docker-release.uri --docker-image-digest-file docker-release.digest
