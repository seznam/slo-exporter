webServerListenAddress: "0.0.0.0:8080"
maximumGracefulShutdownDuration: "10s"
afterPipelineShutdownDelay: "1s"

pipeline: ["tailer", "relabel", "eventKeyGenerator", "dynamicClassifier", "statisticalClassifier", "sloEventProducer", "prometheusExporter"]

modules:

  tailer:
    tailedFile: "examples/from_log/test.log"
    follow: true
    reopen: true
    positionFile: ""
    positionPersistenceInterval: "2s"
    loglineParseRegexp: '^(?P<ip>[A-Fa-f0-9.:]{4,50}) \S+ \S+ \[(?P<time>.*?)\] "(?P<request>.*?)" (?P<statusCode>\d+) \d+ "(?P<referer>.*?)" uag="(?P<userAgent>[^"]+)" "[^"]+" ua="[^"]+" rt="(?P<requestDuration>\d+(\.\d+)??)".+ignore-slo="(?P<ignoreSloHeader>[^"]*)" slo-domain="(?P<sloDomain>[^"]*)" slo-app="(?P<sloApp>[^"]*)" slo-class="(?P<sloClass>[^"]*)" slo-endpoint="(?P<sloEndpoint>[^"]*)" slo-result="(?P<sloResult>[^"]*)"'
    emptyGroupRE: '^-$'

  relabel:
    eventRelabelConfigs:
      # Drop events with unwanted status codes
      - source_labels: ["statusCode"]
        regex: "30[12]|40[045]|411"
        action: drop
      # Drop events with unwanted user agent
      - source_labels: ["userAgent"]
        regex: "(?i)(?:sentry|blackbox-exporter|kube-probe)"
        action: drop

      # Parse out HTTP method as separate label
      - source_labels: ["request"]
        regex: '^\s*(GET|POST|HEAD|UPDATE|DELETE|PUT|CONNECT|OPTIONS|TRACE|PATCH)\s+.*'
        action: replace
        replacement: "$1"
        target_label: "http_method"
      # Parse out HTTP URI as separate label
      - source_labels: ["request"]
        regex: '.*\s+(/[^?\s]*)(?:\?[^\s]*)?\s+.*'
        action: replace
        replacement: "$1"
        target_label: "request_uri"

      # Parse out GET parameter from URI as separate label
      - source_labels: ["request"]
        regex: '.*operationName=(.*)(?:&.*)$'
        action: replace
        target_label: "operation_name"

      # Normalize numbers in URI
      - source_labels: ["request_uri"]
        regex: '(.*)/\d+(/(?:.*))?'
        action: replace
        target_label: "request_uri"
        replacement: "$1/0$2"
      # Normalize URI images names
      - source_labels: ["request_uri"]
        regex: '(.*)/.*\.(?:png|jpg|jpeg|svg|tif|tiff|gif|ico)'
        action: replace
        target_label: "request_uri"
        replacement: "$1/:image"
      # Normalize URI font names
      - source_labels: ["request_uri"]
        regex: '(.*)/.*\.(?:ttf|woff)'
        action: replace
        target_label: "request_uri"
        replacement: "$1/:font"
      # Normalize URI hashes
      - source_labels: ["request_uri"]
        regex: '(.*)/(?:[a-f0-9]{32}|[a-f0-9]{40}|[a-f0-9]{64})(/(?:.*))?'
        action: replace
        target_label: "request_uri"
        replacement: "$1/:hash$2"
      # Normalize URI UUIDs names
      - source_labels: ["request_uri"]
        regex: '(.*)/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}(/(?:.*))?'
        action: replace
        target_label: "request_uri"
        replacement: "$1/:uuid$2"
      # Normalize URI IPs names
      - source_labels: ["request_uri"]
        regex: '(.*)/(?:\d+[.:]){3,}(?:\d+)(/(?:.*))?'
        action: replace
        target_label: "request_uri"
        replacement: "$1/:ip$2"

  eventKeyGenerator:
    filedSeparator: ":"
    overrideExistingEventKey: false
    metadataKeys:
      - http_method
      - request_uri
      - operation_name

  dynamicClassifier:
    regexpMatchesCsvFiles:
      - "examples/from_log/classification.csv"
    unclassifiedEventMetadataKeys:
      - "userAgent"

  statisticalClassifier:
    historyWindowSize: "30m"
    historyWeightUpdateInterval: "1m"
    defaultWeights:
      - weight: 1
        classification:
          sloDomain: "test-domain"
          sloClass: "test1"

  sloEventProducer:
    rulesFiles:
      - "examples/from_log/slo_rules.yaml"

  prometheusExporter:
    metricName: "slo_events_total"
    maximumUniqueEventKeys: 1000
    ExceededKeyLimitPlaceholder: "cardinalityLimitExceeded"
    labelNames:
      result: "result"
      sloDomain: "slo_domain"
      sloClass: "slo_class"
      sloApp: "slo_app"
      eventKey: "event_key"
